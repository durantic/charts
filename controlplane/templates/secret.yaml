apiVersion: v1
kind: Secret
metadata:
  name: {{ include "durantic.fullname" . }}
  labels:
    {{- include "durantic.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": "keep"
    "argocd.argoproj.io/sync-options": "Replace=false"
type: Opaque
data:
  # Django secret key - auto-generated if not provided
  django-secret-key: {{ include "durantic.djangoSecretKey" . | b64enc | quote }}
  
  {{- if and (not .Values.postgresql.enabled) (not .Values.django.database.existingSecret) }}
  # Database password - required when not using PostgreSQL subchart and no existing secret
  database-password: {{ include "durantic.databasePassword" . | b64enc | quote }}
  {{- end }}

  {{- if and (not .Values.redis.enabled) (or (not .Values.django.redis.existingSecret) (eq .Values.django.redis.existingSecret "")) }}
  # Redis password - required when not using Redis subchart and no existing secret
  redis-password: {{ include "durantic.redisPassword" . | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.django.email.user }}
  # Email credentials
  email-user: {{ .Values.django.email.user | b64enc | quote }}
  email-password: {{ .Values.django.email.password | b64enc | quote }}
  {{- end }}
  
  
  # JWE Key for JWT encryption
  jwe-key: {{ include "durantic.jweKey" . | b64enc | quote }}

  {{- if and .Values.certificates.ca.generate (not .Values.certificates.ca.useCertManager) }}
  {{- $caData := include "durantic.generateOrLookupCA" . | splitList "|" }}
  # Auto-generated CA certificate and key for mTLS (Helm genCA mode)
  ca.crt: {{ index $caData 0 | b64enc | quote }}
  ca.key: {{ index $caData 1 | b64enc | quote }}
---
# Client CA secret for ingress-nginx mTLS validation
# Contains only the public CA certificate (no private key)
# Type: generic/Opaque is correct for nginx.ingress.kubernetes.io/auth-tls-secret
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "durantic.fullname" . }}-client-ca
  labels:
    {{- include "durantic.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": "keep"
    "argocd.argoproj.io/sync-options": "Replace=false"
type: Opaque
data:
  ca.crt: {{ index $caData 0 | b64enc | quote }}
  {{- end }}
  {{- if and .Values.certificates.ca.generate .Values.certificates.ca.useCertManager }}
---
# Client CA secret for ingress-nginx mTLS validation (cert-manager mode)
# This is a copy of the CA certificate from the cert-manager secret
# Required because nginx ingress expects just ca.crt, not the full tls.* keys
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "durantic.fullname" . }}-client-ca
  labels:
    {{- include "durantic.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": "keep"
    "argocd.argoproj.io/sync-options": "Replace=false"
    "argocd.argoproj.io/sync-wave": "1"  # Create after cert-manager secret
type: Opaque
stringData:
  ca.crt: |
    {{ "{{" }} index (lookup "v1" "Secret" .Release.Namespace (printf "%s-ca-secret" (include "durantic.fullname" .))) "data" "ca.crt" | b64dec {{ "}}" }}
  {{- end }}